{"version":3,"sources":["components/problemSet.js","services/problemSetGenerator.js","components/homePage.js","App.js","reportWebVitals.js","index.js"],"names":["ProblemSet","props","React","useState","problems","componentProps","setComponentProps","setIsLoaded","useEffect","Container","Table","responsive","striped","bordered","hover","style","fontSize","name","Button","variant","onClick","window","location","reload","map","question","i","days","colSpan","textAlign","href","contestId","index","solved","localStorageItem","JSON","parse","localStorage","getItem","currentProblemSet","tempProblems","setItem","stringify","markUncompleted","markCompleted","ProblemSetGenerator","a","fetch","problemSetTopics","response","json","final","temp","result","splice","problemSetTotalDays","length","obj","push","HomePage","isLoaded","homeDisplay","setHomeDisplay","problemSetDisplay","setProblemSetDisplay","existingProblemSet","setExistingProblemSet","currentProblem","setCurrentproblem","currentProblemName","setCurrentproblemName","currentProblemDays","setCurrentproblemDays","currentProblemIndex","setCurrentproblemIndex","show","setShow","handleClose","e","preventDefault","formData","FormData","target","formDataObj","Object","fromEntries","entries","topicString","key","value","tempQuestions","problemSetName","totalDays","eachDay","problemSetEachDay","display","className","Row","Col","md","Card","bg","text","border","Body","color","existingSet","Title","padding","problemSet","deletedIndex","findIndex","deleteActive","Modal","onHide","backdrop","keyboard","Header","closeButton","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","defaultValue","Check","label","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.237da240.chunk.js","sourcesContent":["import Table from 'react-bootstrap/Table'\nimport Button from \"react-bootstrap/Button\";\nimport React, {useState} from \"react\";\nimport Container from \"react-bootstrap/Container\";\n\nexport default function ProblemSet(props) {\n\n    const [componentProps, setComponentProps] = React.useState({problems:[]});\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    function goBack(){\n        window.location.reload(false);\n    }\n\n    function markCompleted(i){\n        var localStorageItem = JSON.parse(localStorage.getItem(\"problemSets\"));\n        var currentProblemSet = localStorageItem[props.index];\n        currentProblemSet.problems[i].solved = true;\n        var tempProblems = currentProblemSet.problems;\n        tempProblems[i].solved = true;\n        localStorageItem[props.index] = currentProblemSet;\n        localStorage.setItem('problemSets', JSON.stringify(localStorageItem));\n        setComponentProps(\n            {\n                days: props.days,\n                index: props.index,\n                name: props.name,\n                problems: tempProblems\n            }\n        )\n    }\n\n    function markUncompleted(i){\n        var localStorageItem = JSON.parse(localStorage.getItem(\"problemSets\"));\n        var currentProblemSet = localStorageItem[props.index];\n        currentProblemSet.problems[i].solved = false;\n        var tempProblems = currentProblemSet.problems;\n        tempProblems[i].solved = false;\n        localStorageItem[props.index] = currentProblemSet;\n        localStorage.setItem('problemSets', JSON.stringify(localStorageItem));\n        setComponentProps(\n            {\n                days: props.days,\n                index: props.index,\n                name: props.name,\n                problems: tempProblems\n            }\n        )\n    }\n\n    React.useEffect(() => {\n        setComponentProps(props);\n        setIsLoaded(true);\n    }, [props])\n\n    return (\n        <Container>\n            <Table responsive striped bordered hover>\n                <thead>\n                <tr>\n                    <th style={{fontSize:\"30px\"}}>\n                        {props.name}\n                    </th>\n                    <th>\n                        <Button variant=\"primary\" onClick={() => goBack()}>All Sets</Button>\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n                {componentProps.problems.map((question, i) => (\n                    <>\n                        {(i%props.days==0) ? <tr><th colSpan=\"2\" style={{textAlign: \"center\"}}>Day {(i/props.days)+1}</th></tr> : <></>}\n                        <tr>\n                            <td>\n                                <a href={`https://codeforces.com/contest/${question.contestId}/problem/${question.index}`}>{question.name}</a>\n                            </td>\n                            <td>\n                                {(question.solved)\n                                    ?<Button variant=\"success\" onClick={() => markUncompleted(i)}>Completed</Button>\n                                    :<Button variant=\"primary\" onClick={() => markCompleted(i)}>Mark As Done</Button>}\n                            </td>\n                        </tr>\n                    </>\n                ))}\n                </tbody>\n            </Table>\n        </Container>\n    )\n}\n\n","export default async function ProblemSetGenerator(props) {\n    const response = await fetch(\"https://codeforces.com/api/problemset.problems?tags=\"+props.problemSetTopics);\n    const final = await response.json();\n    var problems=[];\n    const temp = final.result.problems.splice(1,props.problemSetTotalDays);\n    for(var i=0; i<temp.length;i++)\n    {\n        var obj = {};\n        obj.name = temp[i].name;\n        obj.contestId = temp[i].contestId;\n        obj.index = temp[i].index;\n        obj.solved = false;\n        problems.push(obj);\n    }\n    return(problems);\n}","import React, { useState} from 'react';\nimport Card from 'react-bootstrap/Card'\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport ProblemSet from \"./problemSet\";\nimport ProblemSetGenerator from \"../services/problemSetGenerator\";\n\nexport default function HomePage() {\n\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [homeDisplay, setHomeDisplay] = useState(\"block\");\n    const [problemSetDisplay, setProblemSetDisplay] = useState(\"none\");\n    const [existingProblemSet, setExistingProblemSet] = useState([]);\n    const [currentProblem, setCurrentproblem] = useState([{problems:[{name: \"Hello\"}],name: \"Hello\"}]);\n    const [currentProblemName, setCurrentproblemName] = useState(\"Sample Name\");\n    const [currentProblemDays, setCurrentproblemDays] = useState(5);\n    const [currentProblemIndex, setCurrentproblemIndex] = useState(0);\n\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n\n\n    function deleteActive(problemSetName){\n        var deletedIndex = existingProblemSet.findIndex((question) => {\n            return (question.name == problemSetName);\n        });\n        var tempQuestions = existingProblemSet;\n        tempQuestions.splice(deletedIndex, 1);\n        localStorage.setItem('problemSets', JSON.stringify(tempQuestions));\n        setExistingProblemSet(tempQuestions);\n        window.location.reload(false);\n    }\n\n    function showProblemSet(problemSet, index){\n        setCurrentproblem(problemSet.problems);\n        setCurrentproblemIndex(index);\n        setCurrentproblemName(problemSet.name);\n        setCurrentproblemDays(problemSet.eachDay);\n        setHomeDisplay(\"none\");\n        setProblemSetDisplay(\"block\");\n    }\n\n    async function onFormSubmit (e) {\n        e.preventDefault()\n        const formData = new FormData(e.target),\n            formDataObj = Object.fromEntries(formData.entries())\n        var topicString = \"\";\n        for (const [key, value] of Object.entries(formDataObj)) {\n            if (key !== \"problemSetName\" && key !== \"problemSetTotalDays\" && key !== \"problemSetEachDay\") {\n                topicString += value + \";\";\n            }\n        }\n\n        const response = await ProblemSetGenerator({\n            problemSetTopics: topicString,\n            problemSetTotalDays: formDataObj[\"problemSetTotalDays\"]*formDataObj[\"problemSetEachDay\"]\n        });\n\n        var tempQuestions = existingProblemSet;\n        tempQuestions.push({name: formDataObj.problemSetName,problems:response, totalDays:formDataObj.problemSetTotalDays, eachDay:formDataObj.problemSetEachDay});\n        localStorage.setItem('problemSets', JSON.stringify(tempQuestions));\n        window.location.reload(false);\n    }\n\n    function displayForm(){\n        setShow(true);\n    }\n\n    React.useEffect(() => {\n        var localStorageItem = JSON.parse(localStorage.getItem(\"problemSets\"));\n        setExistingProblemSet( localStorageItem|| []);\n        setIsLoaded(true);\n    }, [isLoaded])\n\n    return (\n        <>\n            <div style={{display: homeDisplay}}>\n                <Container  className=\"self-container\">\n                    <Row className=\"justify-content-md-center\">\n                        <Col md=\"auto\">\n                            <Card bg=\"light\" className=\"mb-2\" text=\"dark\" className=\"self-card\" style={{border: \"2px dashed #3b3a38\"}} onClick={displayForm}>\n                                <Card.Body style={{fontSize: \"100px\", color: \"#3b3a38\"}}>+</Card.Body>\n                            </Card>\n                        </Col>\n\n                        {existingProblemSet.length ?\n                            (<>{existingProblemSet.map((existingSet, i) => (\n                                <Col md=\"auto\">\n                                    <Card bg=\"light\" className=\"mb-2\" text=\"dark\" border=\"dark\" className=\"self-card\">\n                                        <Card.Title style={{padding: \"10px\"}}>{existingSet.name}</Card.Title>\n                                        <Row>\n                                            <Col>\n                                                <Button variant=\"success\" onClick={() => showProblemSet(existingSet, i)}>\n                                                    Solve\n                                                </Button>\n                                            </Col>\n                                            <Col>\n                                                <Button variant=\"danger\" onClick={() => deleteActive(existingSet.name)}>\n                                                    Delete\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Card>\n                                </Col>\n                            ))}</>)\n                            :\n                            (<></>)}\n                    </Row>\n                </Container>\n                <Modal\n                    show={show}\n                    onHide={handleClose}\n                    backdrop=\"static\"\n                    keyboard={false}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create Problem Set</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form onSubmit={onFormSubmit}>\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n                                <Form.Label>Problem Set Name</Form.Label>\n                                <Form.Control type=\"text\" placeholder=\"Enter Unique Name\" name=\"problemSetName\" defaultValue=\"New ProblemSet\"/>\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n                                <Form.Label>Time Period (days)</Form.Label>\n                                <Form.Control type=\"number\" placeholder=\"Enter Number of Days\" name=\"problemSetTotalDays\" defaultValue={10}/>\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n                                <Form.Label>Number of Questions per Day</Form.Label>\n                                <Form.Control type=\"number\" placeholder=\"Enter Number of Questions to solve each day\" name=\"problemSetEachDay\" defaultValue={5}/>\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n                                <Form.Check type=\"checkbox\" label=\"Binary Search\" name=\"Binary Search\" value=\"binary search\"/>\n                                <Form.Check type=\"checkbox\" label=\"Brute Force\" name=\"Brute Force\" value=\"brute force\"/>\n                                <Form.Check type=\"checkbox\" label=\"Data Structure\" name=\"Data Structure\" value=\"data structure\"/>\n                                <Form.Check type=\"checkbox\" label=\"Dynamic Programming\" name=\"Dynamic Programming\" value=\"dp\"/>\n                                <Form.Check type=\"checkbox\" label=\"Geometry\" name=\"Geometry\" value=\"geometry\"/>\n                                <Form.Check type=\"checkbox\" label=\"Graphs\" name=\"Graphs\" value=\"graphs\"/>\n                                <Form.Check type=\"checkbox\" label=\"Greedy\" name=\"Greedy\" value=\"greedy\"/>\n                                <Form.Check type=\"checkbox\" label=\"Hashing\" name=\"Hashing\" value=\"hashing\"/>\n                                <Form.Check type=\"checkbox\" label=\"Implementation\" name=\"Implementation\" value=\"implementation\"/>\n                                <Form.Check type=\"checkbox\" label=\"Interactive\" name=\"Interactive\" value=\"interactive\"/>\n                                <Form.Check type=\"checkbox\" label=\"Math\" name=\"Math\" value=\"math\"/>\n                                <Form.Check type=\"checkbox\" label=\"Trees\" name=\"Trees\" value=\"trees\"/>\n                                <Form.Check type=\"checkbox\" label=\"Strings\" name=\"Strings\" value=\"strings\"/>\n                                <Form.Check type=\"checkbox\" label=\"Sorting\" name=\"Sorting\" value=\"sortings\"/>\n                            </Form.Group>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Submit\n                            </Button>\n                        </Form>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            Close\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </div>\n            <div style={{display: problemSetDisplay}}>\n                <ProblemSet problems={currentProblem} name={currentProblemName} days={currentProblemDays} index={currentProblemIndex}></ProblemSet>\n            </div>\n        </>\n    )\n}\n\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport HomePage from \"./components/homePage\";\n\nfunction App() {\n  return (\n    <div>\n        <HomePage></HomePage>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}